// function formatText(text) {
//   const paragraphs = text.split('\n\n');
//   const formattedText = paragraphs.map(paragraph => `<p>${paragraph}</p>`).join('');
  
//   return formattedText;
// }

function formatText(text) {
    text = text.replace(/\*/g, ' ');
  
    const paragraphs = text.split('\n\n');
    const formattedText = paragraphs.map(paragraph => `<p>${paragraph}</p>`).join('');
    
    return formattedText;
}
//////////////////////////////////////////////////////
Com a OPENAI & Google:
import dotenv from 'dotenv';
dotenv.config();

import express from 'express';
import multer from 'multer';
import fs from 'fs/promises';
import path from 'path';
import { GoogleGenerativeAI } from '@google/generative-ai';
import OpenAI from 'openai';

const apiKey = process.env.GOOGLE_API_KEY;
const openAIApiKey = process.env.OPENAI_API_KEY;

const genAI = new GoogleGenerativeAI(apiKey);
const openai = new OpenAI({ apiKey: openAIApiKey });

const model = genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
});

const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
};

const app = express();
import { fileURLToPath } from 'url';
import { dirname } from 'path';
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

app.use(express.static(__dirname + '/public'));
app.use(express.json());

const upload = multer({ dest: 'uploads/' });

app.get('/', async function(request, response) {
    response.sendFile('index.html', {
        root: __dirname + '/public'
    });
});

app.post('/summarize', upload.single('file'), async (req, res) => {
    const filePath = req.file.path;

    try {
        const content = await fs.readFile(filePath, 'utf-8');
        const prompt = `Resume o seguinte conteúdo: \n\n${content}`;
        const result = await model.generateContent(prompt, generationConfig);
        const responseAI = await result.response;
        const text = await responseAI.text();

        res.send(text);
    } catch (error) {
        console.log(`Error during AI content generation: ${error.message}`);
        res.status(500).send(`Error generating summary: ${error.message}`);
    } finally {
        try {
            await fs.unlink(filePath);
        } catch (unlinkError) {
            console.log(`Error removing temporary file: ${unlinkError.message}`);
        }
    }
});

app.post('/generate-audio', async (req, res) => {
    const { text } = req.body;
    const audioFilePath = path.resolve(__dirname, 'public', 'speech.mp3');

    try {
        const mp3 = await openai.audio.speech.create({
            model: "tts-1",
            voice: "nova",
            input: text,
        });

        const buffer = Buffer.from(await mp3.arrayBuffer());
        await fs.writeFile(audioFilePath, buffer);

        res.send(`/speech.mp3`);
    } catch (error) {
        console.log(`Error generating audio: ${error.message}`);
        res.status(500).send(`Error generating audio: ${error.message}`);
    }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Running on port ${PORT}`);
});
//////////////////////////////////////////////////////////
Error de cota excedido (Internal server Error)
Pontos adiconados:
- Gerar o resumo com a IA GoogleGenerativeAI
- Gerar o áudio do resumo com a OpenAI (E depois salvá-las em um arquiv mp3)

import dotenv from 'dotenv';
dotenv.config();

import express from 'express';
import multer from 'multer';
import fs from 'fs/promises';
import path from 'path';
import { GoogleGenerativeAI } from '@google/generative-ai';
import OpenAI from 'openai';

const apiKey = process.env.GOOGLE_API_KEY;
const openAIApiKey = process.env.OPENAI_API_KEY;

const genAI = new GoogleGenerativeAI(apiKey);
const openai = new OpenAI({ apiKey: openAIApiKey });

const model = genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
});

const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
};

const app = express();
import { fileURLToPath } from 'url';
import { dirname } from 'path';
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

app.use(express.static(__dirname + '/public'));
app.use(express.json());

const upload = multer({ dest: 'uploads/' });

app.get('/', async function(request, response) {
    response.sendFile('index.html', {
        root: __dirname + '/public'
    });
});

app.post('/summarize', upload.single('file'), async (req, res) => {
    const filePath = req.file.path;
    const audioFilePath = path.resolve(__dirname, 'public', 'summary_speech.mp3');

    try {
        const content = await fs.readFile(filePath, 'utf-8');
        const prompt = `Resume o seguinte conteúdo: \n\n${content}`;
        
        const result = await model.generateContent(prompt, generationConfig);
        const responseAI = await result.response;
        const summary = await responseAI.text();

        const mp3 = await openai.audio.speech.create({
            model: "tts-1",
            voice: "nova",
            input: summary,
        });

        const buffer = Buffer.from(await mp3.arrayBuffer());
        await fs.writeFile(audioFilePath, buffer);

        res.json({ summary, audioUrl: `/summary_speech.mp3`});
    } catch (error) {
        console.log(`Error during AI content generation: ${error.message}`);
        res.status(500).send(`Error generating summary and audio: ${error.message}`);
    } finally {
        try {
            await fs.unlink(filePath);
        } catch (unlinkError) {
            console.log(`Error removing temporary file: ${unlinkError.message}`);
        }
    }
});


app.post('/generate-audio', async (req, res) => {
    const { text } = req.body;
    const audioFilePath = path.resolve(__dirname, 'public', 'speech.mp3');

    try {
        const mp3 = await openai.audio.speech.create({
            model: "tts-1",
            voice: "nova",
            input: text,
        });

        const buffer = Buffer.from(await mp3.arrayBuffer());
        await fs.writeFile(audioFilePath, buffer);

        res.send(`/speech.mp3`);
    } catch (error) {
        console.log(`Error generating audio: ${error.message}`);
        res.status(500).send(`Error generating audio: ${error.message}`);
    }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Running on port ${PORT}`);
});
///////////////////////////////////////////////